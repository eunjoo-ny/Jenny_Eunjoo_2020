{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to Data Science\n",
    "## Homework 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Student Name: Eunjoo ahn\n",
    "\n",
    "Student Netid: ea2319\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1: Naive Bayes (5 Points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1\\. From your reading you know that the naive Bayes classifier works by calculating the conditional probabilities of each feature, $e_i$, occuring with each class $c$ and treating them independently. This results in the probability of a certain class occuring given a set of features, or a piece of evidence, $E$, as\n",
    "\n",
    "$$P(c \\mid E) = \\frac{p(e_1 \\mid c) \\cdot p(e_2 \\mid c) \\cdot \\cdot \\cdot p(e_k \\mid c) \\cdot p(c)}{p(E)}.$$\n",
    "\n",
    "The conditional probability of each piece of evidence occuring with a given class is given by\n",
    "\n",
    "$$P(e_i \\mid c) = \\frac{\\text{count}(e_i, c)}{\\text{count}(c)}.$$\n",
    "\n",
    "In the above equation $\\text{count}(e_i, c)$ is the number of documents in a given class that contain feature $e_i$ and $\\text{count}(c)$ is the number of documents that belong to class $c$. \n",
    "\n",
    "A common variation of the above is to use Laplace (sometimes called +1) smoothing. Recall the use of Laplace smoothing introduced toward the end of Chapter 3 in the section Probability Estimation. This is done in sklearn by setting `alpha=1` in the `BernoulliNB()` function (this is also the default behavior). The result of Laplace smoothing will slightly change the conditional probabilities,\n",
    "\n",
    "$$P(e_i \\mid c) = \\frac{\\text{count}(e_i, c) + 1}{\\text{count}(c) + 2}.$$\n",
    "\n",
    "In no more than **one paragraph**, describe why this is useful, and use the bias-variance tradeoff to justify its use. Try to think of a case when not using Laplace smoothing would result in \"bad\" models. Try to give an example. Be precise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The useful point of Laplace smoothing is to change the zero-values of your data into a small positive number to prevent fail your entire process.  When you change the zero value, you should pay attention to reduce other values and the total sum of probability maintains 1 at the same time.\n",
    "Considering,\n",
    "y_pred=argmaxP(y)P(x_1|y)P(x_2|y)···P(x_n|y)for instance\n",
    "Step1\n",
    "First, you had 30 spam emails and 70 non-spam emails, then you hadP(spam) =0.3,P(non−spam)=0.7···(∗1)\n",
    "Now,maintaining the total sum of probability is1, \n",
    "changes to 31 spam emailsand 69 non-spam emails.P(spam) = 0.31,P(non−spam) = 0.69···(∗2)\n",
    "(∗1)and(∗2)belong to P(y) and the latter value should be decreased considering the augmentation in the process of (∗3)→(∗4)\n",
    "Step2\n",
    "Think about P(x1|y).\n",
    "Assume you originally had ’buy’ in 10 out of 40 spam emails and in no non-spam-emails,\n",
    "P(buy|spam) =0.25,P(buy|non−spam) = 0···(∗3)\n",
    "”P(buy|non−spam) = 0” leads the entire process to fail by being multipliedsince the value is zero. \n",
    "That is, ypred=argmaxP(y)P(buy|non−spam)P(x_2|y)···P(x_n|y) = 0 \n",
    "So,this  phenomenon  yields  this  model  bad.   To  prevent  this  disadvantageous process, you should use Laplace smoothing. Based  on  this  concept, I try to change the zero value into the small positive number.  \n",
    "To change, suppose you had ’buy’ in 12 out of 41 spamemails and in 2 out of 200 spam emails.\n",
    "P(buy|spam) = 0.29,P(buy|non−spam) = 0.01···(∗4)\n",
    "y_pred = argmaxP(y)P(buy|non−spam)P(x_2|y)···P(x_n|y) != 0 \n",
    "You can hamper the entire-process from failing by the Laplace smoothing.  \n",
    "In specifically,\n",
    "Suppose P_{emperical}=x_i/N= 0, then you should employ the Laplace smoothing like this \n",
    "P_{α−smoothed}=xi/{α + αd} where d is constant.\n",
    "You could see that α varies and there is a tradeoff between variance and bias:\n",
    "If α is small, it leads to high variance.\n",
    "If α is large, it leads to high bias."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<wand.image.Image: 97fd7c6 'PDF' (612x792)>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from wand.image import Image as WImage\n",
    "img = WImage(filename='ds_1001_hw5_1 (1).pdf')\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Answer here!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 2: Text classification for sentiment analysis (20 Points)\n",
    "For this part of the assignment, we are going to use a data set of movie ratings from IMDB.com. The data consists of the text of a movie review and a target variable which tells us whether the reviewer had a positive feeling towards the movie (equivalent to rating the movie between 7 and 10) or a negative feeling (rating the movie between 1 and 4). Neutral reactions are not included in the data.\n",
    "\n",
    "The first column is the review text; the second is the text label 'P' for positive or 'N' for negative."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1 (1 Point) \\. Load the data into a pandas `DataFrame()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>'One of the first of the best musicals Anchors...</td>\n",
       "      <td>P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>'Visually disjointed and full of itself the di...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>'These type of movies about young teenagers st...</td>\n",
       "      <td>P</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>'I would rather of had my eyes gouged out with...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>'The title says it all. Tail Gunner Joe was a ...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8495</th>\n",
       "      <td>'Alright friends a serious movie buff is expec...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8496</th>\n",
       "      <td>'I found this film embarrassing to watch. I fe...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8497</th>\n",
       "      <td>'To put it simply I am not fond of westerns. A...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8498</th>\n",
       "      <td>'Some of these viewer comments are just ridicu...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8499</th>\n",
       "      <td>'Sometimes a premise starts out good but becau...</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8500 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Text Class\n",
       "0     'One of the first of the best musicals Anchors...     P\n",
       "1     'Visually disjointed and full of itself the di...     N\n",
       "2     'These type of movies about young teenagers st...     P\n",
       "3     'I would rather of had my eyes gouged out with...     N\n",
       "4     'The title says it all. Tail Gunner Joe was a ...     N\n",
       "...                                                 ...   ...\n",
       "8495  'Alright friends a serious movie buff is expec...     N\n",
       "8496  'I found this film embarrassing to watch. I fe...     N\n",
       "8497  'To put it simply I am not fond of westerns. A...     N\n",
       "8498  'Some of these viewer comments are just ridicu...     N\n",
       "8499  'Sometimes a premise starts out good but becau...     N\n",
       "\n",
       "[8500 rows x 2 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#load the file\n",
    "imdv_data=pd.read_csv('imdb.csv',header=0, sep=',') \n",
    "imdv_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2 (1 Point)\\. Code the target variable to be numeric: use the value `1` to represent 'P' and `0` to represent 'N'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "#make the target variable 1 and 0\n",
    "imdv_data=imdv_data.replace(\"P\", 1).replace(\"N\",0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3 (2 Points)\\. Put all of the text into a data frame called `X` and the target variable in a data frame called `Y`. Make a train/test split where you give 75% of the data to training. Feel free to use any function from sklearn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "#split 75% train and 25%test\n",
    "from sklearn.model_selection import train_test_split\n",
    "imdv_train, imdv_test = train_test_split(imdv_data,train_size=0.75, test_size=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(                                                   Text  Class\n",
       " 55    'This is one of the best animated family films...    1.0\n",
       " 5573  'Man I really wanted to like these shows. I am...    0.0\n",
       " 7254  'This film was abysmal. and not in the good wa...    0.0\n",
       " 5511  'The movie is very lengthy and unfortunately p...    0.0\n",
       " 1668  'Bela Lugosi is great as usual but the movie i...    0.0\n",
       " ...                                                 ...    ...\n",
       " 7705  'Lily Mars a smalltown girl living in Indiana ...    1.0\n",
       " 2647  'The way the story is developed keeps the audi...    1.0\n",
       " 5556  'A lot of people dont think Branaghs Hamlet fi...    1.0\n",
       " 3274  'After reading only two of the comments herein...    1.0\n",
       " 2523  'I have watched 3 episodes of Caveman and I ha...    0.0\n",
       " \n",
       " [6375 rows x 2 columns],\n",
       "                                                    Text  Class\n",
       " 2146  'Sitting Typing\n",
       "  Nothing is the latest what if...    1.0\n",
       " 1981  'Now Ive seen a lot of bad movies. I like bad ...    0.0\n",
       " 1743  'This was one of the worst movies EVER!!!!!!!!...    0.0\n",
       " 7585  'That 70s Show is the best TV show ever period...    1.0\n",
       " 244   'I am at a distinct disadvantage here. I have ...    0.0\n",
       " ...                                                 ...    ...\n",
       " 3202  '*** Contains Spoilers *** I did not like this...    0.0\n",
       " 125   'This film might have weak production values b...    0.0\n",
       " 3367  'THE PERVERTS GUIDE TO CINEMA (2007) ****  If ...    1.0\n",
       " 3976  'Dude really!!!! where have you guys been the ...    0.0\n",
       " 6771  'How can anyone not love this movie ? I think ...    1.0\n",
       " \n",
       " [2125 rows x 2 columns])"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imdv_train,imdv_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "#assign 75% text-train to X and 75% target variable to Y\n",
    "X=imdv_train[\"Text\"]\n",
    "X_test=imdv_test[\"Text\"]\n",
    "Y=imdv_train[\"Class\"]\n",
    "Y_test=imdv_test[\"Class\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(55      'This is one of the best animated family films...\n",
       " 5573    'Man I really wanted to like these shows. I am...\n",
       " 7254    'This film was abysmal. and not in the good wa...\n",
       " 5511    'The movie is very lengthy and unfortunately p...\n",
       " 1668    'Bela Lugosi is great as usual but the movie i...\n",
       "                               ...                        \n",
       " 7705    'Lily Mars a smalltown girl living in Indiana ...\n",
       " 2647    'The way the story is developed keeps the audi...\n",
       " 5556    'A lot of people dont think Branaghs Hamlet fi...\n",
       " 3274    'After reading only two of the comments herein...\n",
       " 2523    'I have watched 3 episodes of Caveman and I ha...\n",
       " Name: Text, Length: 6375, dtype: object,\n",
       " 2146    'Sitting Typing\n",
       "  Nothing is the latest what if...\n",
       " 1981    'Now Ive seen a lot of bad movies. I like bad ...\n",
       " 1743    'This was one of the worst movies EVER!!!!!!!!...\n",
       " 7585    'That 70s Show is the best TV show ever period...\n",
       " 244     'I am at a distinct disadvantage here. I have ...\n",
       "                               ...                        \n",
       " 3202    '*** Contains Spoilers *** I did not like this...\n",
       " 125     'This film might have weak production values b...\n",
       " 3367    'THE PERVERTS GUIDE TO CINEMA (2007) ****  If ...\n",
       " 3976    'Dude really!!!! where have you guys been the ...\n",
       " 6771    'How can anyone not love this movie ? I think ...\n",
       " Name: Text, Length: 2125, dtype: object,\n",
       " 55      1.0\n",
       " 5573    0.0\n",
       " 7254    0.0\n",
       " 5511    0.0\n",
       " 1668    0.0\n",
       "        ... \n",
       " 7705    1.0\n",
       " 2647    1.0\n",
       " 5556    1.0\n",
       " 3274    1.0\n",
       " 2523    0.0\n",
       " Name: Class, Length: 6375, dtype: float64,\n",
       " 2146    1.0\n",
       " 1981    0.0\n",
       " 1743    0.0\n",
       " 7585    1.0\n",
       " 244     0.0\n",
       "        ... \n",
       " 3202    0.0\n",
       " 125     0.0\n",
       " 3367    1.0\n",
       " 3976    0.0\n",
       " 6771    1.0\n",
       " Name: Class, Length: 2125, dtype: float64)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X,X_test,Y,Y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55      1.0\n",
       "5573    0.0\n",
       "7254    0.0\n",
       "5511    0.0\n",
       "1668    0.0\n",
       "       ... \n",
       "7705    1.0\n",
       "2647    1.0\n",
       "5556    1.0\n",
       "3274    1.0\n",
       "2523    0.0\n",
       "Name: Class, Length: 6375, dtype: float64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#make a numeric 0,1\n",
    "Y_train_num=Y.replace(\"P\", 1).replace(\"N\",0)\n",
    "Y_train_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2146    1.0\n",
       "1981    0.0\n",
       "1743    0.0\n",
       "7585    1.0\n",
       "244     0.0\n",
       "       ... \n",
       "3202    0.0\n",
       "125     0.0\n",
       "3367    1.0\n",
       "3976    0.0\n",
       "6771    1.0\n",
       "Name: Class, Length: 2125, dtype: float64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test_num=Y_test.replace(\"P\", 1).replace(\"N\",0)\n",
    "Y_test_num"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4 (5 Points)\\. Create a binary `CountVectorizer()` and a binary `TfidfVectorizer()`. Use the original single words as well as bigrams (in the same model). Also, use an \"english\" stop word list. Fit these to the training data to extract a vocabulary and then transform both the train and test data. Hint - look at the API documentation for both vectorizers to see what we mean by \"binary.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "#transform by the CountVectorizer\n",
    "bigram_vectorizer1 = CountVectorizer(ngram_range=(0, 1),\n",
    "                                  token_pattern=r'\\b\\w+\\b', min_df=1,stop_words='english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       ...,\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0]])"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit the CountVectorizer to the training data to extract a vocabulary \n",
    "#and then transform both the train and test data.\n",
    "X_1 = bigram_vectorizer1.fit_transform(X).toarray()\n",
    "X_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       ...,\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0]])"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_2=bigram_vectorizer1.fit_transform(X_test).toarray()\n",
    "X_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#transform by the TfidfVectorizer\n",
    "bigram_vectorizer2 = TfidfVectorizer(ngram_range=(0, 1),\n",
    "                                  token_pattern=r'\\b\\w+\\b', min_df=1,stop_words='english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit the TfidfVectorizer to the training data to extract a vocabulary \n",
    "#and then transform both the train and test data.\n",
    "X_3 = bigram_vectorizer2.fit_transform(X).toarray()\n",
    "X_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_4 = bigram_vectorizer2.fit_transform(X_test).toarray()\n",
    "X_4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5 (6 Points)\\. Create `LogisticRegression()` and `BernoulliNB()` models. For all settings, keep the default values. In a single plot, show the AUC curve for both classifiers and both vectorizers defined above. In the legend, include the area under the ROC curve (AUC). Do not forget to label your axes. Your final plot will be a single window with 4 curves.\n",
    "\n",
    "Which model do you think does a better job? Why? Explain in no more than a paragraph.\n",
    "\n",
    "Extra credit (2 points): Do any of the options perform identically? If so, can you explain why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn import metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 0, 0, 0])"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#remove nan from 75% X_train by the CountVectorizer\n",
    "nan_array = np.isnan(X_1)\n",
    "not_nan_array = ~ nan_array\n",
    "arr_X1_train = X_1[not_nan_array]\n",
    "arr_X1_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55      1.0\n",
       "5573    0.0\n",
       "7254    0.0\n",
       "5511    0.0\n",
       "1668    0.0\n",
       "       ... \n",
       "7705    1.0\n",
       "2647    1.0\n",
       "5556    1.0\n",
       "3274    1.0\n",
       "2523    0.0\n",
       "Name: Class, Length: 6375, dtype: float64"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fillin nan into 0 for 75% Y_train -the CountVectorizer\n",
    "arr_Y1_train =Y_train_num.fillna(0)\n",
    "arr_Y1_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1., 0., ..., 0., 0., 0.])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reduce dimension 2D into 1D for 75% Y_train -the CountVectorizer\n",
    "flat_Y1_train=arr_Y1_train.ravel() \n",
    "flat_Y1_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(286996125, 6375, 45019.0)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To apply LogisticRegression, compute the number of row and columns before reshape-the CountVectorizer\n",
    "len(arr_X1_train),len(flat_Y1_train),len(arr_X1_train)/len(flat_Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       ...,\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reshape 75% X_train -the CountVectorizer\n",
    "X_1_res = arr_X1_train.reshape((6375, 45019))\n",
    "X_1_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "#apply LogisticRegression to reshaped 75% X_train and Y_train-the CountVectorizer\n",
    "logistic_regression= LogisticRegression()\n",
    "My_vec1_logistic=logistic_regression.fit(X_1_res,flat_Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "#apply BernoulliNB to reshaped 75% X_train and Y_train-the CountVectorizer\n",
    "Bernoulli_nb=BernoulliNB()\n",
    "My_vec1_Bernoulli=Bernoulli_nb.fit(X_1_res,flat_Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 0, 0, 0])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove nan for 25% X_test by the CountVectorizer\n",
    "nan_array = np.isnan(X_2)\n",
    "not_nan_array = ~ nan_array\n",
    "arr_X2_test = X_2[not_nan_array]\n",
    "arr_X2_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7122    1.0\n",
       "2916    1.0\n",
       "574     1.0\n",
       "3140    1.0\n",
       "3696    0.0\n",
       "       ... \n",
       "1542    1.0\n",
       "4497    0.0\n",
       "4418    0.0\n",
       "6370    1.0\n",
       "7372    0.0\n",
       "Name: Class, Length: 2125, dtype: float64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fillin nan into 0 for 25% Y_test -the CountVectorizer\n",
    "arr_Y1_test =Y_test_num.fillna(0)\n",
    "arr_Y1_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., ..., 0., 1., 0.])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reduce dimension 2D into 1D for 25% Y_test\n",
    "flat_Y1_test=arr_Y1_test.ravel() \n",
    "flat_Y1_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(57256000, 2125, 26944.0)"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To apply trained-LogisticRegression to test, \n",
    "#compute the number of row and columns before reshape.\n",
    "len(arr_X2_test),len(flat_Y1_test),len(arr_X2_test)/len(flat_Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       ...,\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0]])"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reshape 25% X_test-the CountVectorizer\n",
    "X_2_res = arr_X2_test.reshape((2125,26944))\n",
    "X_2_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#apply trained-LogisticRegression to test -the CountVectorizer\n",
    "My_vec1_logistic.fit(X_2_res,flat_Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB()"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#apply trained-Bernoulli to test -the CountVectorizer\n",
    "My_vec1_Bernoulli.fit(X_2_res,flat_Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We predict values using the above developed models-the CountVectorizer\n",
    "test_CO_preLog=My_vec1_logistic.predict(X_2_res)\n",
    "test_CO_preBer=My_vec1_Bernoulli.predict(X_2_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating the FPR and the TPR for our predicted values-the CountVectorizer\n",
    "roc_CO_Log=roc_curve(y_true=flat_Y1_test,y_score=test_CO_preLog)\n",
    "roc_CO_Ber=roc_curve(y_true=flat_Y1_test,y_score=test_CO_preBer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., ..., 0., 0., 0.])"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove nan from 75% X_train by the TfidfVectorizer\n",
    "nan_array = np.isnan(X_3)\n",
    "not_nan_array = ~ nan_array\n",
    "arr_X3_train = X_3[not_nan_array]\n",
    "arr_X3_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(286824000, 6375, 44992.0)"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To apply LogisticRegression, compute the number of row and columns before reshape.\n",
    "#-the TfidfVectorizer\n",
    "len(arr_X3_train),len(flat_Y1_train),len(arr_X3_train)/len(flat_Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       ...,\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0]])"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reshape 75% X_train -the TfidfVectorizer\n",
    "X_3_res = arr_X1_train.reshape((6375,44992))\n",
    "X_3_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "#apply LogisticRegression to reshaped 75% X_train and Y_train-the TfidfVectorizer\n",
    "My_vec2_logistic=logistic_regression.fit(X_3_res,flat_Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "#apply BernoulliNB to reshaped 75% X_train and Y_train-the TfidfVectorizer\n",
    "My_vec2_Bernoulli=Bernoulli_nb.fit(X_3_res,flat_Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., ..., 0., 0., 0.])"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove nan for 25% X_test by the TfidfVectorizer\n",
    "nan_array = np.isnan(X_4)\n",
    "not_nan_array = ~ nan_array\n",
    "arr_X4_test = X_4[not_nan_array]\n",
    "arr_X4_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(57853125, 2125, 27225.0)"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(arr_X4_test),len(flat_Y1_test),len(arr_X4_test)/len(flat_Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##reshape 25% X_test- the TfidfVectorizer\n",
    "X_4_res = arr_X4_test.reshape((2125, 27225))\n",
    "X_4_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#apply trained-LogisticRegression to test-the TfidfVectorizer\n",
    "My_vec2_logistic.fit(X_4_res,flat_Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BernoulliNB()"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##apply trained-Bernoulli to test-the TfidfVectorizer\n",
    "My_vec2_Bernoulli.fit(X_4_res,flat_Y1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We predict values using the above developed models-the TfidfVectorizer\n",
    "test_TF_preLog=My_vec2_logistic.predict(X_4_res)\n",
    "test_TF_preBer=My_vec2_Bernoulli.predict(X_4_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating the FPR and the TPR for our predicted values-the TfidfVectorizer\n",
    "roc_TF_Log=roc_curve(y_true=flat_Y1_test,y_score=test_TF_preLog)\n",
    "roc_TF_Ber=roc_curve(y_true=flat_Y1_test,y_score=test_TF_preBer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import entropy\n",
    "import os\n",
    "from sklearn.metrics import roc_auc_score, roc_curve\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_CO_preBer=My_vec1_Bernoulli.predict(X_2_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating the FPR and the TPR for our predicted values-the CountVectorizer\n",
    "roc_CO_Log=roc_curve(y_true=flat_Y1_test,y_score=test_CO_preLog)\n",
    "roc_CO_Ber=roc_curve(y_true=flat_Y1_test,y_score=test_CO_preBer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We predict values using the above developed models-the TfidfVectorizer\n",
    "test_TF_preLog=My_vec2_logistic.predict(X_4_res)\n",
    "test_TF_preBer=My_vec2_Bernoulli.predict(X_4_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating the FPR and the TPR for our predicted values-the TfidfVectorizer\n",
    "roc_CO_Log=roc_curve(y_true=flat_Y1_test,y_score=test_TF_preLog)\n",
    "roc_CO_Ber=roc_curve(y_true=flat_Y1_test,y_score=test_TF_preBer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#the ROC curve (AUC)\n",
    "plt.figure(figsize=(12,8))\n",
    "\n",
    "\n",
    "plt.plot(roc_CO_Log[0],roc_CO_Log[1],color='red',lw=3,label='AUC for Logistic Regression-CountVectorizer: %.4f' %(roc_auc_score(y_true=flat_Y1_test,y_score=test_CO_preLog)))\n",
    "plt.plot(roc_CO_Ber[0],roc_CO_Ber[1],color='blue',lw=3,linestyle='--',label='AUC for Ber-CountVectorizer: %.4f' %(roc_auc_score(y_true=flat_Y1_test,y_score=test_CO_preBer)))\n",
    "plt.plot(roc_TF_Log[0],roc_TF_Log[1],color='yellow',lw=3,label='AUC for Logistic Regression-TfidfVectorizer: %.4f' %(roc_auc_score(y_true=flat_Y1_test,y_score=test_TF_preLog)))\n",
    "plt.plot(roc_TF_Ber[0],roc_TF_Ber[1],color='green',lw=3,linestyle='--',label='AUC for Ber-TfidfVectorizer: %.4f' %(roc_auc_score(y_true=flat_Y1_test,y_score=test_TF_preBer)))\n",
    "plt.plot([0, 1], [0, 1], color='green', lw=1, linestyle=':') #We plot a base line to indicate 0.5 indicating random chance\n",
    "plt.title('Area under the ROC')\n",
    "plt.legend(loc='lower right')\n",
    "plt.xlabel('FPR')\n",
    "plt.ylabel('TPR')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn import metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run this so your plots show properly\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = 12, 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn import metrics\n",
    "\n",
    "# Code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explanation here!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "5\\. Use the model from question 4 that you think did the best job and predict the rating of the test data. Find 5 examples were labeled positive, but were incorrectly classified as negative. Print out the reviews below and include an explanation as to why you think it may have been incorrectly classified. You can pick any 5. They do not have to be at random."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Code here to display 5 incorrect reviews."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explanation for the 5 reviews chosen here!"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
